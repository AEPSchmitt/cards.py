import os
import sys
import argparse
import csv
import errno
import shutil


def create_missing_directories_if_necessary(path):
    """
    Mimics the command 'mkdir -p'.
    """
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def content_from_template(data, template):
    """
    Returns the contents of the template with all template fields replaced by
    any matching fields in the provided data.
    """
    content = template

    for field in data:
        content = content.replace('{{%s}}' % str(field), data[field])

    return content


def main(argv):
    parser = argparse.ArgumentParser(
        description='Generate printable sheets of cards')

    parser.add_argument('-f', '--filename',
                        dest='filename',
                        help='The path to a CSV file containing card data',
                        required=True)

    parser.add_argument('-t', '--template',
                        dest='template',
                        help='The path to a card template',
                        required=True)

    parser.add_argument('-T', '--title',
                        dest='title',
                        help='The title of the generated cards',
                        required=False)

    parser.add_argument('-D', '--description',
                        dest='description',
                        default='Pages generated by cards.py',
                        help='The description of the generated cards',
                        required=False)

    parser.add_argument('-C', '--disable-cut-lines',
                        dest='disable_cut_lines',
                        action='store_true',
                        default=False,
                        help='Disable cut guides on the margins of the pages',
                        required=False)

    args = vars(parser.parse_args())

    # required arguments
    data_path = args['filename']
    default_template_path = args['template']

    # optional arguments
    title = args['title']
    description = args['description']
    disable_cut_lines = bool(args['disable_cut_lines'])

    with open(data_path) as f:
        data = csv.DictReader(f)

        with open(default_template_path) as t:
            default_template = t.read().strip()

        if len(default_template) == 0:
            print('The provided template appears to be empty. '
                  'No cards will be generated.')

            return

        with open('template/page.html') as p:
            page = p.read()

            if disable_cut_lines:
                page = page.replace('{{style}}', 'style="display: none"')
            else:
                page = page.replace('{{style}}', '')

        with open('template/card.html') as c:
            card = c.read()

        with open('template/index.html') as i:
            index = i.read()

        cards = ''
        pages = ''

        cards_on_page = 0
        cards_on_all_pages = 0

        max_cards_per_page = 9

        pages_total = 0

        for row in data:
            # determine how many instances of this card to generate (defaults
            # to a single instance if not specified)
            count = int(row.get('@count', 1))

            if count < 0:
                # if a negative count is specified, treat it as none
                count = 0

            for i in range(count):
                # determine which template to use for this card (defaults to
                # the template specified from the --template option)
                template_path = row.get('@template', default_template_path)

                if template_path is not default_template_path:
                    if not os.path.isabs(template_path):
                        # if the template path is not an absolute path, assume
                        # that it's located relative to where the data is
                        template_path = os.path.join(
                            os.path.dirname(data_path),
                            template_path)

                    with open(template_path) as t:
                        template = t.read().strip()
                else:
                    # if the template path points to the same template as
                    # provided throuh --template, we already have it available
                    template = default_template

                cards += card.replace('{{content}}',
                                      content_from_template(row, template))

                cards_on_page += 1
                cards_on_all_pages += 1

                if cards_on_page == max_cards_per_page:
                    pages += page.replace('{{cards}}', cards)

                    pages_total += 1

                    cards_on_page = 0
                    cards = ''

        if cards_on_page > 0:
            pages += page.replace('{{cards}}', cards)

            pages_total += 1

        create_missing_directories_if_necessary('generated')

        with open('generated/index.html', 'w') as result:
            if not title or len(title) == 0:
                title = 'cards.py: {0} card(s), {1} page(s)'.format(
                    cards_on_all_pages,
                    pages_total)

            index = index.replace('{{title}}', title)
            index = index.replace('{{description}}', description)
            index = index.replace('{{pages}}', pages)

            result.write(index)

        shutil.copyfile('template/index.css', 'generated/index.css')

if __name__ == "__main__":
    main(sys.argv)
